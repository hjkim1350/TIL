2022.07.19 OOP

객체지향프로그래밍?
객체: 추상화된 어떠한 형태로 묶인 것을 의미, 변수, 자료구조, 메서드, 클래스 등이 이에 속함
즉 파이썬을 구성하는 모든 것들은 모두 객체라고 할 수 있음

클래스: 직사각형 그 자체
인스턴스: 내가 그린 직사각형, 남이 그린 직사각형
속성: 이름, 성별 등
메서드: 어떠한 행위

ex)
클래스: Class Person
인스턴스: iu = person() / 생성자(__init__), 소멸자(__del__)
속성(변수): iu.name
메서드(함수): iu.greeting()

이 인스턴스에서 중요한 개념 중 하나가 "self"
ex)
class person:
    def greeing(self, ):
        #인스턴스의 이름을 활용하고 싶음
        self.name
        #-->사실은 내부 메모리에서는 person.greeting(iu)가 먼저 실행되는 것

self라는 개념이 나온게.. 인스턴스도 "사람"이라는 범주안에 iu라는 개인이 있음.
이 개인이 있다는 것을 초기화해야하므로... 변수도 초기화 하는것처럼.
그래서 이 룰을 적용하기 위해 self라는 개념이 나온것으로 보임.


깊은복사 vs 얕은복사
깊은 복사 : 그 위치 값 자체를 바꿈
- 깊은 복사라고 한 이유는 그 위치 자체를 깊숙히 들어가야함
깊은 복사의 경우 import copy를 통해 .deepcopy() 메서드를 활용

얕은 복사 : 메모리 주소에 연결된 데이터를 바꿈
- 얕은 복사라고 한 이유는 위치만 접근하기 때문

ex)
a = [1, 2, 3] # 값은 같으나 주소는 다름
b = [1, 2, 3]

print(a == b, a is b) # True False

ex2)
a = [1, 2, 3] # 값과 주소 모두 동일
b = a

print(a == b, a is b) # True True


생성자 메소드
- 인스턴스 객체가 생성될 때 자동으로 호출되는 메소드
- 인스턴스 변수들의 초기값 자동 생성
